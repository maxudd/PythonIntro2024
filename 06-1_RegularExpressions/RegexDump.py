"""
Структура РВ

Написать программу, которой на вход подаётся синтаксически верное регулярное
выражение, а затем — строки поиска (последняя строка пустая). Программа
должна выводить информацию о первой найденной в строке поиска подстроке,
соответствующей регулярному выражению, в таком формате:
    * Если подстрока не найдена, выводится «<NONE>»
    * Если подстрока найдена, выводится позиция: подстрока, где «позиция» —
      это номер символа в строке, начиная с которого была найдена подстрока
    * Если в регулярном выражении присутствовала группировка с сохранением
      (попросту скобочки), выводится номер группы/позиция: подстрока для
      каждой группы
    * Если в регулярном выражении присутствовали именованные группы,
      выводится имя группы/позиция: подстрока для каждой группы (в порядке
      их появления в re.Match.groupdict())
    * Если какая-то группа присутствует в исходном выражении, но не нашла
      сопоставления (например, была помечена повторителем * и пропущена),
      она не выводится
"""

import re

pattern = input()
strs = []

while s := input():
    strs.append(s)

for str1 in strs:
    pat = re.compile(fr'{pattern}')
    res = pat.search(str1)
    if res:
        startpos, _ = res.span()
        print(f'{startpos}: {res.group()}')
        for gr, substr in enumerate(res.groups()):
            if substr:
                print(f'{gr+1}/{res.start(gr+1)}: {substr}')
        for gr, substr in res.groupdict().items():
            if substr:
                print(f'{gr}/{res.start(gr)}: {substr}')
    else:
        print('<NONE>')
